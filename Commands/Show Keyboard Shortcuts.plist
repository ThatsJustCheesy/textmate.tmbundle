<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>nop</string>
	<key>command</key>
	<string>#!/usr/bin/env ruby
# Checks user and local Application Support domains for TextMate bundles
# Parses them for the keyboard shortcuts
# And displays a nice HTML view
#
# Pass -b to get a list per-bundle instead of per-type

$bundle = ENV['TM_BUNDLE_SUPPORT'].chomp('/')

$: &lt;&lt; "#{$bundle}"
require "#{ENV['TM_SUPPORT_PATH']}/lib/osx/plist"

SHORTCUT_TITLES = {
	"keyEquivalent" =&gt; "Key Equivalent",
	"tabTrigger" =&gt; "Tab Trigger",
	"inputPattern" =&gt; "Input Pattern",
}

def getShortcutTypes(child)
	types = []
	if child.has_key?('keyEquivalent')
		types &lt;&lt; 'keyEquivalent'
	elsif child.has_key?('tabTrigger') or child.has_key?('trigger')
		types &lt;&lt; 'tabTrigger'
	elsif child.has_key?('inputPattern')
		types &lt;&lt; 'inputPattern'
	end
	types
end

def getShortcuts(child)
	shortcuts = []
	if child.has_key?('keyEquivalent')
		shortcuts &lt;&lt; ["keyEquivalent", convertKeyEquivalent(child['keyEquivalent'])]
	end
	if child.has_key?('tabTrigger')
		shortcuts &lt;&lt; ["tabTrigger", addEntities(child['tabTrigger'])]
	end
	if child.has_key?('trigger')
		shortcuts &lt;&lt; ["tabTrigger", addEntities(child(['tabTrigger']))]
	end
	if child.has_key?('inputPattern')
		shortcuts &lt;&lt; ["inputPattern", addEntities(child['inputPattern'])]
	end
	shortcuts
end

KEY_GLYPHS = {
	"left"			=&gt; "&amp;#x2190;",
	"up"			=&gt; "&amp;#x2191;",
	"right"			=&gt; "&amp;#x2192;",
	"down"			=&gt; "&amp;#x2193;",
	"home"			=&gt; "&amp;#x2196;",
	"end"			=&gt; "&amp;#x2198;",
	"return"		=&gt; "&amp;#x21A9;",
	"pageup"		=&gt; "&amp;#x21DE;",
	"pagedown"		=&gt; "&amp;#x21DF;",
	"tab"			=&gt; "&amp;#x21E5;",
	"backtab"		=&gt; "&amp;#x21E4;",
	"shift"			=&gt; "&amp;#x21E7;",
	"control"		=&gt; "&amp;#x2303;",
	"enter"			=&gt; "&amp;#x2305;",
	"command"		=&gt; "&amp;#x2318;",
	"modifier"		=&gt; "&amp;#x2325;",
	"clear"			=&gt; "&amp;#x2327;",
	"backspace"		=&gt; "&amp;#x232B;",
	"delete"		=&gt; "&amp;#x2326;",
	"escape"		=&gt; "&amp;#x238B;",
}

KEY_BYTES = {
	"\xEF\x9C\x80"	=&gt; "up",
	"\xEF\x9C\x81"	=&gt; "down",
	"\xEF\x9C\x82"	=&gt; "left",
	"\xEF\x9C\x83"	=&gt; "right",
	"\xEF\x9C\xA8"	=&gt; "delete",
	"\xEF\x9C\xA9"	=&gt; "home",
	"\xEF\x9C\xAB"	=&gt; "end",
	"\xEF\x9C\xAC"	=&gt; "pageup",
	"\xEF\x9C\xAD"	=&gt; "pagedown",
	"\xEF\x9C\xB9"	=&gt; "clear",
	"\x7F\x0A"		=&gt; "backspace",
	"\n"			=&gt; "return",
	"\r"			=&gt; "return",
	"\x03"			=&gt; "enter",
	"\x1B"			=&gt; "escape",
	"\t"			=&gt; "tab",
	"\x19"			=&gt; "backtab",
}

def convertKeyEquivalent(text)
	option = text.include?('~') ? KEY_GLYPHS['modifier'] : ''
	control = text.include?('^') ? KEY_GLYPHS['control'] : '' 
	command = text.include?('@') ? KEY_GLYPHS['command'] : ''
	shift = (text != text.downcase or text.include?('$')) ? KEY_GLYPHS['shift'] : ''
	text.upcase!
	keypad = (text.include?('#') and not text.include?("\x03")) ? '&amp;#x20E3' : ''
	text.gsub!(/[~^@$#]/,'')
	text.gsub!("&amp;", "&amp;amp;")
	text.gsub!("&lt;", "&amp;lt;")
	text.gsub!("&gt;", "&amp;gt;")
	(1..16).each { |i| text.sub!("\xEF\x9C%c" % (0x83+i), 'F'+i.to_s ) }
	text.sub!("\xEF\x9D\x86", '?&amp;#x20DD;')
	KEY_BYTES.each { |key, value| text.sub!(key, KEY_GLYPHS[value]) }
	control + option + shift + command + text + keypad
end

def addEntities(text)
	text.gsub!("&amp;", "&amp;amp;")
	text.gsub!("&lt;", "&amp;lt;")
	text.gsub!("&gt;", "&amp;gt;")
	text
end

#$scripturl = "file://#{$bundle}/Scripts/list_shortcuts.js"
#$stylesheeturl = "file://#{$bundle}/Stylesheets/list_shortcuts.css"
$scripturl = "#{$bundle}/Scripts/list_shortcuts.js"
$stylesheeturl = "#{$bundle}/Stylesheets/list_shortcuts.css"

puts '&lt;html&gt;&lt;head&gt;&lt;title&gt;Keyboard Shortcuts List&lt;/title&gt;'
puts '&lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /&gt;'
#puts %{&lt;script type="text/ecmascript" src="#{$scripturl}" charset="utf-8" /&gt;}
#puts '&lt;style type="text/css"&gt;'
#puts "	@import '#{$stylesheeturl}';"
#puts '&lt;/style&gt;&lt;/head&gt;'
#
# I'm including the extra files directly in here to get around the caching issue
puts '&lt;script type="text/ecmascript"&gt;'
IO.foreach($scripturl) { |line| puts line }
puts '&lt;/script&gt;'
puts '&lt;style type="text/css"&gt;'
IO.foreach($stylesheeturl) { |line| puts line }
puts '&lt;/style&gt;'
puts '&lt;body onload="setup();"&gt;'
puts '&lt;h1&gt;Keyboard Shortcuts List&lt;/h1&gt;&lt;hr /&gt;'

bundles = OSX::PropertyList.load(%x{"#{$bundle}/bin/KeyboardShortcuts"})

puts '&lt;div id="header"&gt;'
puts '&lt;div class="jumpblock"&gt;'
puts 'Jump:'
puts '&lt;select id="jump"&gt;'
puts '&lt;option&gt;Bundles:&lt;/option&gt;'
bundles.each do |bundle|
	name = addEntities(bundle['name'])
	puts %{&lt;option value="#{name.gsub(' ', '_')}"&gt;#{name}&lt;/option&gt;}
end
puts '&lt;/select&gt;'
puts '&lt;/div&gt;'
puts '&lt;div class="filter"&gt;'
puts 'Filter:'
puts '&lt;select id="filter" onchange="jump"&gt;'
puts '&lt;option value="all"&gt;All&lt;/option&gt;'
puts '&lt;option value="keyEquivalent"&gt;Key Equivalent&lt;/option&gt;'
puts '&lt;option value="tabTrigger"&gt;Tab Trigger&lt;/option&gt;'
puts '&lt;option value="trigger"&gt;Input Pattern&lt;/option&gt;'
puts '&lt;/select&gt;'
puts '&lt;/div&gt;'
puts '&lt;/div&gt;'

puts '&lt;hr /&gt;'

bundles.each do |bundle|
	puts %{&lt;a name="#{addEntities(bundle['name']).gsub(' ', '_')}"&gt;&lt;/a&gt;}
	puts "&lt;h2&gt;#{addEntities(bundle['name'])}&lt;/h2&gt;"
	['Commands', 'Macros', 'Snippets'].each do |type|
		items = bundle[type]
		classes = Hash.new("");
		items.each do |item|
			shortcutTypes = getShortcutTypes(item)
			shortcutTypes.each { |shortcutType| classes[shortcutType] = shortcutType + 'Block' }
		end if not items.nil?
		classes = classes.values.join(' ')
		if not items.to_a.empty?
			puts %{\t&lt;div class="typeblock #{classes}"&gt;}
			puts %{\t&lt;h3&gt;#{addEntities(type)}&lt;/h3&gt;\n\t&lt;table&gt;}
			items.each do |item|
				shortcuts = getShortcuts(item)
				shortcuts.each do |shortcut|
					shortcutType = shortcut[0]
					shortcutValue = shortcut[1]
					puts "\t\t&lt;tr class=\"#{shortcutType}\"&gt;"
					puts %{\t\t\t&lt;td class="name"&gt;#{addEntities(item['name'])}&lt;/td&gt;}
					puts %{\t\t\t&lt;td class="type"&gt;#{SHORTCUT_TITLES[shortcutType]}&lt;/td&gt;}
					puts %{\t\t\t&lt;td class="shortcut"&gt;#{shortcutValue}&lt;/td&gt;}
					puts "\t\t&lt;/tr&gt;"
					item['name'] = ''
				end
			end
			puts "\t&lt;/table&gt;"
			puts "\t&lt;/div&gt;"
		end
	end
end

puts '&lt;hr /&gt;'

puts '&lt;div id="footer"&gt;'
puts '&lt;div class="jump"&gt;'
puts 'Jump:'
puts '&lt;select id="jump2"&gt;'
puts '&lt;option&gt;Bundles:&lt;/option&gt;'
bundles.each do |bundle|
	name = addEntities(bundle['name'])
	puts %{&lt;option value="#{name.gsub(' ', '_')}"&gt;#{name}&lt;/option&gt;}
end
puts '&lt;/select&gt;'
puts '&lt;/div&gt;'

puts '&lt;/body&gt;&lt;/html&gt;'
</string>
	<key>dontFollowNewOutput</key>
	<true/>
	<key>input</key>
	<string>none</string>
	<key>keyEquivalent</key>
	<string>^~@k</string>
	<key>name</key>
	<string>Show Keyboard Shortcuts</string>
	<key>output</key>
	<string>showAsHTML</string>
	<key>uuid</key>
	<string>970BA294-B667-11D9-8D53-00039369B986</string>
</dict>
</plist>
